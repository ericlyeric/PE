package Problem_012;

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

public class DivTriangle {
    public double triangleDivisor(int divisorNumber) {
        if (divisorNumber <= 0) return 0;
        int input = 1;
        long t_number = 0;
        int numberOfDivisors = 0;
        while (numberOfDivisors <= divisorNumber) {
            t_number = triangleNumber(input);
            numberOfDivisors = divisors(t_number);
            input++;
        }
        return t_number;
    }

    private long triangleNumber(int x) {
        if (x == 1) return 1;
        else return (long) x*(x + 1)/2;
    }

    private int divisors(long number) {
        int count = 0;
        for (int i = 1; i <= Math.sqrt(number); i++) {
            if (number % i == 0) count+=2;
        }
        return count;
    }
}
